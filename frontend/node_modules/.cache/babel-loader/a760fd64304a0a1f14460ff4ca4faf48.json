{"ast":null,"code":"export const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n};\nexport const readBytes = async function* (iterable, chunkSize, encode) {\n  for await (const chunk of iterable) {\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : await encode(String(chunk)), chunkSize);\n  }\n};\nexport const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {\n  const iterator = readBytes(stream, chunkSize, encode);\n  let bytes = 0;\n  return new ReadableStream({\n    type: 'bytes',\n\n    async pull(controller) {\n      const {\n        done,\n        value\n      } = await iterator.next();\n\n      if (done) {\n        controller.close();\n        onFinish();\n        return;\n      }\n\n      let len = value.byteLength;\n      onProgress && onProgress(bytes += len);\n      controller.enqueue(new Uint8Array(value));\n    },\n\n    cancel(reason) {\n      onFinish(reason);\n      return iterator.return();\n    }\n\n  }, {\n    highWaterMark: 2\n  });\n};","map":{"version":3,"names":["streamChunk","chunk","chunkSize","len","byteLength","pos","end","slice","readBytes","iterable","encode","ArrayBuffer","isView","String","trackStream","stream","onProgress","onFinish","iterator","bytes","ReadableStream","type","pull","controller","done","value","next","close","enqueue","Uint8Array","cancel","reason","return","highWaterMark"],"sources":["C:/Users/bubba/Kable Coding Project/MERN Deploy/frontend/node_modules/axios/lib/helpers/trackStream.js"],"sourcesContent":["\n\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize, encode) {\n  for await (const chunk of iterable) {\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encode(String(chunk))), chunkSize);\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {\n  const iterator = readBytes(stream, chunkSize, encode);\n\n  let bytes = 0;\n\n  return new ReadableStream({\n    type: 'bytes',\n\n    async pull(controller) {\n      const {done, value} = await iterator.next();\n\n      if (done) {\n        controller.close();\n        onFinish();\n        return;\n      }\n\n      let len = value.byteLength;\n      onProgress && onProgress(bytes += len);\n      controller.enqueue(new Uint8Array(value));\n    },\n    cancel(reason) {\n      onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n"],"mappings":"AAEA,OAAO,MAAMA,WAAW,GAAG,WAAWC,KAAX,EAAkBC,SAAlB,EAA6B;EACtD,IAAIC,GAAG,GAAGF,KAAK,CAACG,UAAhB;;EAEA,IAAI,CAACF,SAAD,IAAcC,GAAG,GAAGD,SAAxB,EAAmC;IACjC,MAAMD,KAAN;IACA;EACD;;EAED,IAAII,GAAG,GAAG,CAAV;EACA,IAAIC,GAAJ;;EAEA,OAAOD,GAAG,GAAGF,GAAb,EAAkB;IAChBG,GAAG,GAAGD,GAAG,GAAGH,SAAZ;IACA,MAAMD,KAAK,CAACM,KAAN,CAAYF,GAAZ,EAAiBC,GAAjB,CAAN;IACAD,GAAG,GAAGC,GAAN;EACD;AACF,CAhBM;AAkBP,OAAO,MAAME,SAAS,GAAG,iBAAiBC,QAAjB,EAA2BP,SAA3B,EAAsCQ,MAAtC,EAA8C;EACrE,WAAW,MAAMT,KAAjB,IAA0BQ,QAA1B,EAAoC;IAClC,OAAOT,WAAW,CAACW,WAAW,CAACC,MAAZ,CAAmBX,KAAnB,IAA4BA,KAA5B,GAAqC,MAAMS,MAAM,CAACG,MAAM,CAACZ,KAAD,CAAP,CAAlD,EAAoEC,SAApE,CAAlB;EACD;AACF,CAJM;AAMP,OAAO,MAAMY,WAAW,GAAG,CAACC,MAAD,EAASb,SAAT,EAAoBc,UAApB,EAAgCC,QAAhC,EAA0CP,MAA1C,KAAqD;EAC9E,MAAMQ,QAAQ,GAAGV,SAAS,CAACO,MAAD,EAASb,SAAT,EAAoBQ,MAApB,CAA1B;EAEA,IAAIS,KAAK,GAAG,CAAZ;EAEA,OAAO,IAAIC,cAAJ,CAAmB;IACxBC,IAAI,EAAE,OADkB;;IAGxB,MAAMC,IAAN,CAAWC,UAAX,EAAuB;MACrB,MAAM;QAACC,IAAD;QAAOC;MAAP,IAAgB,MAAMP,QAAQ,CAACQ,IAAT,EAA5B;;MAEA,IAAIF,IAAJ,EAAU;QACRD,UAAU,CAACI,KAAX;QACAV,QAAQ;QACR;MACD;;MAED,IAAId,GAAG,GAAGsB,KAAK,CAACrB,UAAhB;MACAY,UAAU,IAAIA,UAAU,CAACG,KAAK,IAAIhB,GAAV,CAAxB;MACAoB,UAAU,CAACK,OAAX,CAAmB,IAAIC,UAAJ,CAAeJ,KAAf,CAAnB;IACD,CAfuB;;IAgBxBK,MAAM,CAACC,MAAD,EAAS;MACbd,QAAQ,CAACc,MAAD,CAAR;MACA,OAAOb,QAAQ,CAACc,MAAT,EAAP;IACD;;EAnBuB,CAAnB,EAoBJ;IACDC,aAAa,EAAE;EADd,CApBI,CAAP;AAuBD,CA5BM"},"metadata":{},"sourceType":"module"}